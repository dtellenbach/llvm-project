; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple arm64-apple-ios -mattr +cmpbr -verify-machineinstrs -o - < %s | FileCheck %s --check-prefix=CHECK-CMPBR
; RUN: llc -mtriple arm64-apple-ios -mattr -cmpbr -verify-machineinstrs -o - < %s | FileCheck %s --check-prefix=CHECK-NO-CMPBR

define void @cbge_out_of_upper_bound(i32 %a)  {
; CHECK-CMPBR-LABEL: cbge_out_of_upper_bound:
; CHECK-CMPBR:       ; %bb.0: ; %entry
; CHECK-CMPBR-NEXT:    mov w8, #71 ; =0x47
; CHECK-CMPBR-NEXT:    cbge w0, w8, LBB0_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB0_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbge_out_of_upper_bound:
; CHECK-NO-CMPBR:       ; %bb.0: ; %entry
; CHECK-NO-CMPBR-NEXT:    cmp w0, #71
; CHECK-NO-CMPBR-NEXT:    b.ge LBB0_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB0_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
entry:
  %cmp = icmp sgt i32 %a, 70
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbge_out_of_lower_bound(i32 %a)  {
; CHECK-CMPBR-LABEL: cbge_out_of_lower_bound:
; CHECK-CMPBR:       ; %bb.0: ; %entry
; CHECK-CMPBR-NEXT:    mov w8, #-10 ; =0xfffffff6
; CHECK-CMPBR-NEXT:    cbge w0, w8, LBB1_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB1_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbge_out_of_lower_bound:
; CHECK-NO-CMPBR:       ; %bb.0: ; %entry
; CHECK-NO-CMPBR-NEXT:    cmn w0, #10
; CHECK-NO-CMPBR-NEXT:    b.ge LBB1_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB1_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
entry:
  %cmp = icmp sge i32 %a, -10
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

; This should trigger a register swap.
define void @cble_out_of_lower_bound(i32 %a)  {
; CHECK-CMPBR-LABEL: cble_out_of_lower_bound:
; CHECK-CMPBR:       ; %bb.0: ; %entry
; CHECK-CMPBR-NEXT:    mov w8, #-10 ; =0xfffffff6
; CHECK-CMPBR-NEXT:    cbhs w8, w0, LBB2_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB2_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cble_out_of_lower_bound:
; CHECK-NO-CMPBR:       ; %bb.0: ; %entry
; CHECK-NO-CMPBR-NEXT:    cmn w0, #10
; CHECK-NO-CMPBR-NEXT:    b.ls LBB2_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB2_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
entry:
  %cmp = icmp ule i32 %a, -10
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}
